
# NOTE: `embedding_size` and `logit_size` are external parameters

# NOTE: The following section will be embedded in `default_config.yml` in `tf-metric-learning` repo
#       and with the key: `evaluator`.

# database: Zeus | DatasetBackbone | Native
database:
    database_type: Native
    database_config:
        # path to attributes_table.json
        path: misc/native_attr_table_example.db

# index agent option: Numpy | HNSW
index_agent: HNSW

# upper-bound of the evaluation instances
container_size: 100000

chosen_evaluations:
    #- RankingWithAttributesEvaluation
    #- CheckoutEvaluation
    - RankingEvaluation
    #- FacenetEvaluation

# Configurations for evaluator:
evaluation_options:
    # Implemented Evaluations
    FacenetEvaluation:
        sampling:
            # random_sample | amount_weighted | amount_inverse_weighted
            class_sample_method: random_sample
            num_of_pairs: 1000
            num_of_instance_per_class: 1
            ratio_of_class: 0.1

        # these will be checked in FacenetEvaluation
        metric:
            accuracy:            true
            validation_rate:     true
            false_accept_rate:   false
            true_positive_rate:  true
            false_positive_rate: false

        distance_measure:
            function:
                - euclidean
            threshold:
                start: 1.0
                end: 1.5
                step: 0.25
        attribute: # not support

        option:
            path_pairlist: # not done

    RankingEvaluation:
        sampling:
            class_sample_method: uniform
            instance_sample_method: uniform
            num_of_db_instance: 200
            num_of_query_class: 100
            num_of_query_instance_per_class: 20
            maximum_of_sampled_data: 10000

        metric:
            # top_1_hit is defaults
            top_k_hit_accuracy:
                - 1
                - 5
            mAP: true

        distance_measure:
            function:
            threshold:

        # As a section of codes
        attribute: # developing
            # if `query` & `database` are not defined, sampling instead
            cross_reference:
                - query->database
                - seen+query->unseen+database # seen to unseen
                - (seen+query)->(seen-unseen+database) # seen to total
                - seen + query -> (seen-unseen+database) # seen to total
            # e.g attribute_name `color` with values `red`, `blue` or 'yellow'.
            group:
                - color.red
                - color.red+color.blue
                - color.red + color.blue
                #- color.* # have to implement string parser handling *
                # color.red, color.yellow

        option:
            path_database: # not done
            seen_dataset: # not done
            unseen_dataset: # not done

    # The evaluation supports only offline
    CheckoutEvaluation:
        sampling:
            class_sample_method: all_class
            instance_sample_method: uniform

        metric:
            # top_1_hit is defaults
            top_k_hit_accuracy:
                - 1
                - 5
            mAP: true

        attribute:
            cross_reference:
                - seen+query->seen+database
                - unseen->unseen
            group:
                - color

        option:
            num_of_seen_query_class: 100
            num_of_seen_db_instance: 10
            num_of_seen_query_instance_per_class: 1
            num_of_unseen_query_class: 100
            num_of_unseen_db_instance: 10
            num_of_unseen_query_instance_per_class: 1
            seen_unique_ids: misc/seen_unique_ids_gp1444.json
            unseen_unique_ids: misc/unseen_unique_ids_gp1444.json
            label_map: misc/labelmap_1933.json
            save_report:

    RankingWithAttributesEvaluation:

        sampling:
            class_sample_method: uniform
            instance_sample_method: uniform
            num_of_db_instance: 10
            num_of_query_class: 100
            num_of_query_instance_per_class: 50
            maximum_of_sampled_data: 10000

        metric:
            # top_1_hit is defaults
            top_k_hit_accuracy:
                - 1
                - 5
            mAP: true

        distance_measure:
            function:
            threshold:

        attribute: # not support
            # path to grouping_rules.json
            # TODO: Parse json at parser
            grouping_rules: misc/grouping_rules.json

        option:
            path_database: # not done
            seen_dataset: # not done
            unseen_dataset: # not done

# OPTIONS OF EACH ITEMS
